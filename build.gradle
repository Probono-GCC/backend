plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.11'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'probono.gcc'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.hibernate:hibernate-validator:7.0.5.Final'
    implementation 'org.modelmapper:modelmapper:3.0.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //swagger: spring doc 의존성 추가
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0'
    implementation 'mysql:mysql-connector-java:8.0.33'

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

//    //swagger
//    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
//    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
//    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
    
    //migration
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // Spring Cache 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-cache'


    // 모니터링
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-core'

    //레디스 캐싱
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'



}


////   ./gradlew bootRun -Pprofile=prod로 명령어 실행
//bootRun {
//    if (project.hasProperty('profile')) {
//        systemProperty 'spring.profiles.active', project.getProperty('profile')
//    } else {
//        systemProperty 'spring.profiles.active', 'local'
//    }
//}

bootRun {
    systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active") ?: "prod"
}




tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}
